{
  "hash": "84998010c0205b601aeeb23a4ca96334",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"O que é ?\"\nbread-crumbs: false\n---\n\n\n# Uma breve introdução ao Método de Monte Carlo (M.C)\n\nO post em si é uma forma de explicação de uma maneira breve porém concisa, sobre o que é o método de Monte Carlo e possivelmente um futuro post no qual haverá um estudo sobre as diferenças desta ferramenta em detrimento dos métodos numéricos convencionais.\n\n## Qual a finalidade do método de Monte Carlo?\n\nUm dos intuitos em se criar esse método é ser uma ferramenta mais fácil para conseguir atingir certos objetivos, a matemática dividi-se em pura e aplicada, a pura com muito rigor metodológico e cálculos complexos e a aplicada baseando-se mais em métodos experimentais para chegar aos resultados de problemas aplicados ao dia a dia. O método de M.C por sua vez, busca juntar as melhores partes da matemática pura com as da parte aplicada, trocando as partes fracas que compõe a matemática pura como a alta complexidade das equações por meios mais fáceis como os métodos experimentais da aplicada. Em resumo, esta ferramenta usa de variáveis aleatórias e um grande número de experimentos, que por sua vez sustentandas pela L.G.N (Lei dos Grandes Números) resulta em um resultado aproximado do problema.\n\n## Estimando Pi(π) por meio de variáveis aleatórias por M.C\n\n***Imagine que, você começa a fazer uma prova de matemática e uma determinada questão te pede o valor Pi (π) e você somente pode usar um computador que gerará valores aleatórios em um determinado intervalo, como fazer?***\n\nA princípio essa pergunta é maluca, porém sua resolução é elegante e curiosa. Mostraremos primeiramente a ideia matemática e após isso o código por meio da linguagem [R](https://www.rdocumentation.org/) mostrando sua resolução.\n\n## Explicação Matemática\n\nConsidere o quadrado $Q$ de vértices $(-1, 1), (1,1), (1,-1)$ e $(-1,-1)$ e considere também o círculo C de raio 1, circunscrito em Q.\n\nSeja A, o seguinte conjunto:\n\n$$\n  A = \\{ (x,y) \\in \\mathbb{Q}; x^2 + y^2 \\leq 1 \\}\n$$\n\nOu seja, o conjunto A é formado pelos pontos do quadrado Q que estão dentro da círculo C ($x² + y² ≤ 1$). Dessa forma, P(A) representa a probabilidade de sortear um número que esteja dentro do círculo.Logo,\n\n$$\n  P(A) = \\frac{Área \\space de \\space C}{Área \\space de \\space Q} = \\frac{\\pi \\times 1^2}{2^2} = \\frac{\\pi}{4}\n$$\n\ne, por consequência,\n\n$$\n  \\pi = 4 \\times P(A)\n$$\n\n### Utilizando o código em R\n\nPrimeiramente, geraremos dois conjuntos com 100.000 pontos aleatórios cada com nosso computador, esses dois conjuntos tem intervalos fechados que que vão de \\[-1,1\\] (o tamanho do intervalo é arbitrário, porém um intervalo menor precisará de menos pontos para conseguir uma estimativa de π boa) e atribuiremos ao primeiro conjunto uma variável x e ao segundo á uma variável y, que serão o par ordenado (x,y).\n\n![Circle](Imgs/monte_carlo_pt1_circle.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Gera um vetor de tamanho #100000 com todos os #campos preenchidos #com um valor entre -1 e 1 \nx <- runif(100000,-1,1) \ny <- runif(100000,-1,1) \n```\n:::\n\n\nApós isso, devemos ver quantos pontos caíram dentro do círculo C e quantos pontos caíram fora, tendo o número de pontos que caíram dentro é fácil determinar a probabilidade de ter caído dentro do círculo P(A), já é só dividirmos pelo total de pontos que foram sorteados (no caso, 100.000).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Circulo de centro na origem (0,0) de raio 1 \ncirculo <- x^2 + y^2 <= 1 \n# O vetor circulo detem valores TRUE se cairam dentro, e FALSE se \n# fora; \\# sum( circulo ) soma +1 nos indices TRUE e soma +0 \n# nos de valor FALSE \n\np <- sum( circulo )/ 100000 \n```\n:::\n\n\nComo temos, a P(A) na variavel p, e temos também a Área do quadrado Q, conseguimos o valor de Pi, como justificado matematicamente acima.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\npiresultado <- 4*p \n# piresultado = 3.13988 \nplot(x, y, type = \"n\") \n# Pontos que cairam dentro em laranja \npoints(x[ circulo ], y[ circulo ], col = \" orange \", pch = 20, cex = 0.5) \n# Pontos que cairam fora em azul \npoints(x[! circulo ], y[! circulo ], col = \" blue \", pch = 20, cex = 0.5)\n```\n\n::: {.cell-output-display}\n![](Monte_Carlo_Pt1_files/figure-html/unnamed-chunk-3-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n## Referências:\n\n-   Código e explicação usados em aula do professor Pedro Franklin da UFU\n\n-   [Artigo2008_MMC](https://www.scielo.br/j/qn/a/sJtBCMjy58FLgy74kqRyBmB/?lang=pt)\n\n-   [Introdução aos Métodos de Monte Carlo Avançados-Adrian Hinojosa Luna](https://www.est.ufmg.br/portal/wp-content/uploads/2023/01/RTE_01_2019.pdf)\n\n-   [MÉTODO MONTE CARLO E SUAS APLICAÇÕES-ADMILSON RODRIGUES DE CARVALHO](http://repositorio.ufrr.br:8080/jspui/bitstream/prefix/388/1/M%C3%A9todo%20Monte%20Carlo%20e%20suas%20aplica%C3%A7%C3%B5es...%20Carvalho.pdf)\n",
    "supporting": [
      "Monte_Carlo_Pt1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}