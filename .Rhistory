---
title: "Portfolio"
---
title: "Monte Carlo Parte 1"
#Gera um vetor de tamanho #100000 com todos os #campos preenchidos #com um valor entre -1 e 1
x <- runif(100000,-1,1)
y <- runif(100000,-1,1)
# Circulo de centro na origem (0,0) de raio 1
circulo <- x^2 + y^2 <= 1
# O vetor circulo detem valores TRUE se cairam dentro, e FALSE se
# fora; \# sum( circulo ) soma +1 nos indices TRUE e soma +0
# nos de valor FALSE
p <- sum( circulo )/ 100000
piresultado <- 4*p
# piresultado = 3.13988
plot(x, y, type = "n")
# Pontos que cairam dentro em laranja
points(x[ circulo ], y[ circulo ], col = " orange ", pch = 20, cex = 0.5)
# Pontos que cairam fora em azul
points(x[! circulo ], y[! circulo ], col = " blue ", pch = 20, cex = 0.5)
x <- c(1,2,3,4)
x
git
cmd
dir
pws
pwd
#Gera um vetor de tamanho #100000 com todos os #campos preenchidos #com um valor entre -1 e 1
x <- runif(100000,-1,1)
y <- runif(100000,-1,1)
library(plotrix)
#create scatter plot
plot(x, y)
#add circle at specific (x, y) coordinates with specific radius
draw.circle(x=3, y=8, radius=.5)
library(ggplot)
library(ggplot2)
ggplot() +
geom_circle(data = data.frame(x0 = 0,y0 = 0,r = 1))
library("ggplot2")
library("ggplot2")
ggplot() +
geom_circle(data = data.frame(x0 = 0,y0 = 0,r = 1))
draw.circle(0, 0, 1)
library("plotrix")
draw.circle(0, 0, 1)
library("plotrix")
draw.circle(0, 0, 1)
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
#plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
#draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
```
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
#draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
#plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
##plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
library("plotrix")
x = runif(100, -1, 1)
y = runif(100, -1, 1)
plot(x, y, asp = 1, xlim = c(-1, 1))
draw.circle(0, 0, 1, nv = 1000, border = NULL, col = NA, lty = 1, lwd = 1)
Primeiramente, geraremos dois conjuntos com 100.000 pontos aleatórios cada com nosso computador, esses dois conjuntos tem intervalos fechados que que vão de \[-1,1\] (o tamanho do intervalo é arbitrário, porém um intervalo menor precisará de menos pontos para conseguir uma estimativa de π boa) e atribuiremos ao primeiro conjunto uma variável x e ao segundo á uma variável y, que serão o par ordenado (x,y).
setwd()
```
```{r}
getwd()
getwd()
```{r}
![Elephant](/Imgs/monte_carlo_pt_circle.webpg)
```{r}
#lança a moeda 5000 vezes e guarda
# este vetor de tamanho 5 mil na variavel lancamentos
lancamentos <- sample (x=c(0 ,1) , size =5000 , replace = TRUE )
proporcao <- cumsum ( lancamentos )/ 1:5000
#o comando acima calcula a média acumulada para cada
# valor de n entre 1 e 5000 e guarda este vetor de
#médias em proporcao
#os comandos a seguir gerararam a Figura 1
plot (x = 1:5000 , y = proporcao ,type = "l",
xlab = "numero de lancamentos ",
ylab = " proporcao de caras ")
abline (h = c(0.5) , col = "red")
res <- c()
dist <-c()
#For representando os 1000 dias da sua vida
for(j in 1:1000){
#10000 lancamentos sao feitos a cada dia
for(i in 1:10000){
x <- sample(c(1,2,3,4,5,6),1)
res[i] <- x
}
# ao final de cada dia anota no caderno "dist"
dist[j] <- mean(res)
}
hist(dist)
res <- c()
for(i in 1:10000){
x <- sample(c(1,2,3,4,5,6),1)
res[i] <- x
}
proporcao <- cumsum ( res )/ 1:10000
#Plota Figura 2
plot (x = 1:10000 , y = proporcao ,type = "l", ylab = "Media", xlab = "Numero de Lancamentos")
abline (h = c(3.5) , col = "red")
res <- c()
for(i in 1:10000){
x <- sample(c(1,2,3,4,5,6),1)
res[i] <- x
}
proporcao <- cumsum ( res )/ 1:10000
#Plota Figura 2
plot (x = 1:10000 , y = proporcao ,type = "l", ylab = "Media", xlab = "Numero de Lancamentos")
abline (h = c(3.5) , col = "red")
---
title: "Monte Carlo Parte 2"
res <- c()
for(i in 1:10000){
x <- sample(c(1,2,3,4,5,6),1)
res[i] <- x
}
proporcao <- cumsum ( res )/ 1:10000
#Plota Figura 2
plot (x = 1:10000 , y = proporcao ,type = "l", ylab = "Media", xlab = "Numero de Lancamentos")
abline (h = c(3.5) , col = "red")
#| fig-keep: last
res <- c()
for(i in 1:10000){
x <- sample(c(1,2,3,4,5,6),1)
res[i] <- x
}
proporcao <- cumsum ( res )/ 1:10000
#Plota Figura 2
plot (x = 1:10000 , y = proporcao ,type = "l", ylab = "Media", xlab = "Numero de Lancamentos")
abline (h = c(3.5) , col = "red")
#lança a moeda 5000 vezes e guarda
# este vetor de tamanho 5 mil na variavel lancamentos
lancamentos <- sample (x=c(0 ,1) , size =5000 , replace = TRUE )
proporcao <- cumsum ( lancamentos )/ 1:5000
#o comando acima calcula a média acumulada para cada
# valor de n entre 1 e 5000 e guarda este vetor de
#médias em proporcao
#os comandos a seguir gerararam a Figura 1
plot (x = 1:5000 , y = proporcao ,type = "l",
xlab = "numero de lancamentos ",
ylab = " proporcao de caras ")
abline (h = c(0.5) , col = "red")
#| fig-keep: last
#| fig-align: center
#lança a moeda 5000 vezes e guarda
# este vetor de tamanho 5 mil na variavel lancamentos
lancamentos <- sample (x=c(0 ,1) , size =5000 , replace = TRUE )
proporcao <- cumsum ( lancamentos )/ 1:5000
#o comando acima calcula a média acumulada para cada
# valor de n entre 1 e 5000 e guarda este vetor de
#médias em proporcao
#os comandos a seguir gerararam a Figura 1
plot (x = 1:5000 , y = proporcao ,type = "l",
xlab = "numero de lancamentos ",
ylab = " proporcao de caras ")
abline (h = c(0.5) , col = "red")
adsadsa
#| fig-keep: last
#| fig-align: center
piresultado <- 4*p
# piresultado = 3.13988
plot(x, y, type = "n")
# Circulo de centro na origem (0,0) de raio 1
circulo <- x^2 + y^2 <= 1
# O vetor circulo detem valores TRUE se cairam dentro, e FALSE se
# fora; \# sum( circulo ) soma +1 nos indices TRUE e soma +0
# nos de valor FALSE
p <- sum( circulo )/ 100000
#| fig-keep: last
#| fig-align: center
piresultado <- 4*p
# piresultado = 3.13988
plot(x, y, type = "n")
# Circulo de centro na origem (0,0) de raio 1
circulo <- x^2 + y^2 <= 1
# O vetor circulo detem valores TRUE se cairam dentro, e FALSE se
# fora; \# sum( circulo ) soma +1 nos indices TRUE e soma +0
# nos de valor FALSE
p <- sum( circulo )/ 100000
#Gera um vetor de tamanho #100000 com todos os #campos preenchidos #com um valor entre -1 e 1
x <- runif(100000,-1,1)
y <- runif(100000,-1,1)
# Circulo de centro na origem (0,0) de raio 1
circulo <- x^2 + y^2 <= 1
# O vetor circulo detem valores TRUE se cairam dentro, e FALSE se
# fora; \# sum( circulo ) soma +1 nos indices TRUE e soma +0
# nos de valor FALSE
p <- sum( circulo )/ 100000
#| fig-keep: last
#| fig-align: center
piresultado <- 4*p
# piresultado = 3.13988
plot(x, y, type = "n")
# Pontos que cairam dentro em laranja
points(x[ circulo ], y[ circulo ], col = " orange ", pch = 20, cex = 0.5)
# Pontos que cairam fora em azul
points(x[! circulo ], y[! circulo ], col = " blue ", pch = 20, cex = 0.5)
